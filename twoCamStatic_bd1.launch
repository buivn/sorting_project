<launch>
  
  <!-- Load hand geometry parameters -->  
  <include file="$(find gpd)/launch/hand_geometry.launch">
    <arg name="node" value="twoCamStatic_bd1"/>
  </include>
  
  <!-- Load classifier parameters -->
  <include file="$(find gpd)/launch/lenet/ur5_classifier_15channels.launch">
    <arg name="node" value="twoCamStatic_bd1" />
  </include>
  
	
  	<!-- Explaination: classify_grasp_candidates is node name, classify_candidates is the file name -->
    <!-- type = name of executable file in C++, or is the python file name ___.py -->
	<node name="twoCamStatic_bd1" pkg="gpd" type="twoCamSta1" output="screen">
    
    <!-- Where the point cloud is stored -->
    <param name="cloud_filename1" value="/home/bui/bui_ws/image_sample/depth_point0429/camera1_2.pcd" />   
    <param name="cloud_filename2" value="/home/bui/bui_ws/image_sample/depth_point0429/camera2_2.pcd" /> 
    
    <!-- Plotting parameters -->
    <param name="plot_normals" value="false" />
    <param name="plot_samples" value="false" />    
    <param name="plot_candidates" value="false" />
    <param name="plot_filtered_grasps" value="false" />
    <param name="plot_valid_grasps" value="false" />
    <param name="plot_clusters" value="true" />
    <param name="plot_selected_grasps" value="false" />
    
    <!-- Preprocessing of point cloud -->
    <param name="voxelize" value="false"/> <!-- Voxelize the point cloud -->
    <param name="remove_outliers" value="false"/> <!-- Remove statistical outliers from the point cloud -->
    <rosparam param="workspace"> [-1, 1, -1, 1, -1, 1] </rosparam>
    <rosparam param="camera_position"> [0, 0, 0] </rosparam> <!-- The position of the camera -->
    
    <param name= "roll" value = "-0.09" /> <!-- distance and orientation of two cameras-->
    <param name = "pitch" value = "0.0" />
    <param name = "yaw" value = "0.0" />
    <param name = "twocam_dis_x" value = "-0.14" />
    <param name = "twocam_dis_y" value = "0.00" />
    <param name = "twocam_dis_z" value = "0.07" />

    <!-- Selected 2D pixel from Hai's node -->
    <!-- <rosparam param="selected_2Dpixel"> [502, 270] </rosparam> -->
    <!-- <rosparam param="selected_2Dpixel"> [269, 320] </rosparam> -->
    <!-- <rosparam param="selected_2Dpixel"> [140, 325] </rosparam> -->
    <rosparam param="selected_2Dpixel"> [350, 360] </rosparam>
    <!-- 1 object = 0.2, 2 objects = 0.3, 3-4 objects = 0.35 -->
    <param name="based_object_number_filterPara" value="0.22" /> 

    <!-- General parameters -->
    <param name="num_samples" value="100" /> <!-- The number of samples to draw from the point cloud -->
    <param name="num_threads" value="11" /> <!-- The number of CPU threads to be used -->
    
    <!-- Parameters for local grasp candidate search -->
    <param name="nn_radius" value="0.01" /> <!-- Radius for the point neighborhood search -->
    <param name="num_orientations" value="8" /> <!-- Number of orientations to consider -->
    
    <!-- Filtering of grasp candidates --> 
    <param name="filter_grasps" value="false" /> <!-- on workspace and robot gripper width -->
    <param name="min_aperture" value="0.3" /> <!-- The minimum gripper width -->
    <param name="max_aperture" value="0.7" /> <!-- The maximum gripper width -->
    <rosparam param="workspace_grasps"> [-1, 1, -1, 1, -1, 1] </rosparam> <!-- (x,y,z)-dimensions of the workspace, should be smaller than <workspace> -->
    <param name="filter_half_antipodal" value="false"/> <!-- on half antipodal -->
    
    <!-- Filtering of grasps which are too low on (i.e. too close to) table -->
    <!-- <param name="filter_table_side_grasps" value="false" />
    <rosparam param="vertical_axis"> [0, 0, 1] </rosparam>
    <param name="angle_thresh" value="0.1" />
    <param name="table_height" value="0.0" />
    <param name="table_thresh" value="0.05" />
     -->
    <!-- Grasp image creation -->
    <param name="create_image_batches" value="false" /> <!-- creates grasp images in batches (less memory usage) -->
    <!-- <param name="remove_plane_before_image_calculation" value="false" /> --> <!-- removes table plane from point cloud to speed up shadow computations -->
        
    <!-- Clustering of grasps -->
    <param name="min_inliers" value="10" /> <!-- min inliers in each cluster; set to 0 to avoid clustering -->
    
    <!-- Grasp selection -->
    <param name="min_score_diff" value="50" /> <!-- Threshold to sort out grasps with low scores -->
    <param name="num_selected" value="3" /> <!-- The number of selected grasps (sorted by score) -->
        
	</node>
  
</launch>
